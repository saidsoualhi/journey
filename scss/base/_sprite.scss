// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$add-name: 'add';
$add-x: 0px;
$add-y: 0px;
$add-offset-x: 0px;
$add-offset-y: 0px;
$add-width: 9px;
$add-height: 9px;
$add-total-width: 23px;
$add-total-height: 261px;
$add-image: '../img/sprite.png';
$add: (0px, 0px, 0px, 0px, 9px, 9px, 23px, 261px, '../img/sprite.png', 'add', );
$icon-android-name: 'icon-android';
$icon-android-x: 0px;
$icon-android-y: 162px;
$icon-android-offset-x: 0px;
$icon-android-offset-y: -162px;
$icon-android-width: 20px;
$icon-android-height: 23px;
$icon-android-total-width: 23px;
$icon-android-total-height: 261px;
$icon-android-image: '../img/sprite.png';
$icon-android: (0px, 162px, 0px, -162px, 20px, 23px, 23px, 261px, '../img/sprite.png', 'icon-android', );
$icon-apple-name: 'icon-apple';
$icon-apple-x: 0px;
$icon-apple-y: 200px;
$icon-apple-offset-x: 0px;
$icon-apple-offset-y: -200px;
$icon-apple-width: 19px;
$icon-apple-height: 23px;
$icon-apple-total-width: 23px;
$icon-apple-total-height: 261px;
$icon-apple-image: '../img/sprite.png';
$icon-apple: (0px, 200px, 0px, -200px, 19px, 23px, 23px, 261px, '../img/sprite.png', 'icon-apple', );
$icon-pixel-perfect-name: 'icon-pixel-perfect';
$icon-pixel-perfect-x: 0px;
$icon-pixel-perfect-y: 57px;
$icon-pixel-perfect-offset-x: 0px;
$icon-pixel-perfect-offset-y: -57px;
$icon-pixel-perfect-width: 19px;
$icon-pixel-perfect-height: 19px;
$icon-pixel-perfect-total-width: 23px;
$icon-pixel-perfect-total-height: 261px;
$icon-pixel-perfect-image: '../img/sprite.png';
$icon-pixel-perfect: (0px, 57px, 0px, -57px, 19px, 19px, 23px, 261px, '../img/sprite.png', 'icon-pixel-perfect', );
$icon-retina-ready-name: 'icon-retina-ready';
$icon-retina-ready-x: 0px;
$icon-retina-ready-y: 91px;
$icon-retina-ready-offset-x: 0px;
$icon-retina-ready-offset-y: -91px;
$icon-retina-ready-width: 22px;
$icon-retina-ready-height: 20px;
$icon-retina-ready-total-width: 23px;
$icon-retina-ready-total-height: 261px;
$icon-retina-ready-image: '../img/sprite.png';
$icon-retina-ready: (0px, 91px, 0px, -91px, 22px, 20px, 23px, 261px, '../img/sprite.png', 'icon-retina-ready', );
$icon-smart-objects-name: 'icon-smart-objects';
$icon-smart-objects-x: 0px;
$icon-smart-objects-y: 126px;
$icon-smart-objects-offset-x: 0px;
$icon-smart-objects-offset-y: -126px;
$icon-smart-objects-width: 18px;
$icon-smart-objects-height: 21px;
$icon-smart-objects-total-width: 23px;
$icon-smart-objects-total-height: 261px;
$icon-smart-objects-image: '../img/sprite.png';
$icon-smart-objects: (0px, 126px, 0px, -126px, 18px, 21px, 23px, 261px, '../img/sprite.png', 'icon-smart-objects', );
$icon-vectors-name: 'icon-vectors';
$icon-vectors-x: 0px;
$icon-vectors-y: 24px;
$icon-vectors-offset-x: 0px;
$icon-vectors-offset-y: -24px;
$icon-vectors-width: 12px;
$icon-vectors-height: 18px;
$icon-vectors-total-width: 23px;
$icon-vectors-total-height: 261px;
$icon-vectors-image: '../img/sprite.png';
$icon-vectors: (0px, 24px, 0px, -24px, 12px, 18px, 23px, 261px, '../img/sprite.png', 'icon-vectors', );
$icon-windows-name: 'icon-windows';
$icon-windows-x: 0px;
$icon-windows-y: 238px;
$icon-windows-offset-x: 0px;
$icon-windows-offset-y: -238px;
$icon-windows-width: 23px;
$icon-windows-height: 23px;
$icon-windows-total-width: 23px;
$icon-windows-total-height: 261px;
$icon-windows-image: '../img/sprite.png';
$icon-windows: (0px, 238px, 0px, -238px, 23px, 23px, 23px, 261px, '../img/sprite.png', 'icon-windows', );
$spritesheet-width: 23px;
$spritesheet-height: 261px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($add, $icon-android, $icon-apple, $icon-pixel-perfect, $icon-retina-ready, $icon-smart-objects, $icon-vectors, $icon-windows, );
$spritesheet: (23px, 261px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
